# -*- coding: utf-8 -*-
"""AccelerometerDataAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jhrviz0_1RA3YA1PbcJ-UgBBjv8emQ0G

**Trying to detect steps counts based on the acceleration data of Phone**

Upload the Acceleration Data Excel file
"""

from google.colab import files
uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

"""All the Imports"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks

"""Load the data file. Change the name of the file if needed"""

import io
data = pd.read_excel(io.BytesIO(uploaded['Acceleration without g 2025-02-11 11-24-45.xls']))

print(data.head()) # To see the first 5 rows of the data

"""Extract The Absolute Acceleration"""

# Extract the absolute acceleration
time = data['Time (s)'].values
absolute_acceleration = data['Absolute acceleration (m/s^2)'].values

"""Apply a low-pass filter to remove noise"""

# Apply a low-pass filter to smooth the data
def low_pass_filter(data, alpha=0.1):
    filtered_data = np.zeros_like(data)
    filtered_data[0] = data[0]
    for i in range(1, len(data)):
        filtered_data[i] = alpha * data[i] + (1 - alpha) * filtered_data[i-1]
    return filtered_data

filtered_acceleration = low_pass_filter(absolute_acceleration, alpha=0.1)

"""Detect peak in the filtered data"""

# Detect peaks in the filtered data
peaks, _ = find_peaks(filtered_acceleration, height=1.0, distance=20)  # Adjust height and distance as needed

"""Plot the data and detected peaks"""

# Plot the data and detected peaks
plt.figure(figsize=(10, 6))
plt.plot(time, absolute_acceleration, label='Absolute Acceleration')
plt.plot(time, filtered_acceleration, label='Filtered Acceleration')
plt.plot(time[peaks], filtered_acceleration[peaks], "x", label='Detected Peaks')
plt.xlabel('Time (s)')
plt.ylabel('Acceleration (m/s^2)')
plt.title('Step Detection from Accelerometer Data')
plt.legend()
plt.show()

"""Peaks are an estimate of count"""

# Count the number of steps
num_steps = len(peaks)
print(f'Number of steps detected: {num_steps}')

"""See the individual linear data"""

accerleration_x = data['Linear Acceleration x (m/s^2)'].values
accerleration_y = data['Linear Acceleration y (m/s^2)'].values
accerleration_z = data['Linear Acceleration z (m/s^2)'].values

plt.figure(figsize=(10, 6))
plt.plot(time, accerleration_x, color='red', label='Acceleration x')
plt.plot(time, accerleration_y, color='blue', label='Acceleration y')
plt.plot(time, accerleration_z, color='green', label='Acceleration z')
plt.xlabel('Time (s)')
plt.ylabel('Acceleration (m/s^2)')
plt.title('Acceleration in x, y, and z directions')
plt.legend()
plt.show()